version: '3.7'

services:
  influxdb:
    container_name: nussknacker_influxdb
    hostname: influxdb
    image: influxdb:${INFLUXDB_VERSION-1.8.4-alpine}
    ports:
      - "3086:8086"
    environment:
      INFLUXDB_DB: esp
    volumes:
      - ./influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
      - storage_influxdb:/var/lib/influxdb

  telegraf:
    container_name: nussknacker_telegraf
    image: telegraf:${TELEGRAF_VERSION-1.14.1-alpine}
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf

  zookeeper:
    container_name: nussknacker_zookeeper
    image: zookeeper:${ZOOKEEPER_VERSION-3.5.5}
    environment:
      ZOO_MY_ID: 1
      JVMFLAGS: "-Xms64m -Xmx128m"
    volumes:
      - storage_zookeeper_datalog:/datalog
      - storage_zookeeper_data:/data

  kafka:
    container_name: nussknacker_kafka
    image: ${KAFKA_REPOSITORY-wurstmeister/kafka}:${KAFKA_VERSION-2.12-2.3.0}
    ports:
      - "3032:3032"
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:3032
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:3032
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "processedEvents:1:1"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: -Xms128m -Xmx512m
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - storage_kafka_data:/kafka
    depends_on:
      - zookeeper

  akhq:
    container_name: nussknacker_akhq
    image: tchiotludo/akhq:${AKHQ_VERSION-0.20.0}
    environment:
      AKHQ_CONFIGURATION: |
        micronaut:
          server:
            context-path: /akhq
        akhq:
          connections:
            nussknacker:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schemaregistry:8081"
    ports:
      - 8085:8080
    links:
      - kafka
      - schemaregistry

  schemaregistry:
    container_name: nussknacker_schemaregistry
    image: confluentinc/cp-schema-registry:${SCHEMA_REGISTRY_VERSION-5.5.7}
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
    ports:
      - "3082:8081"
    depends_on:
      - zookeeper
      - kafka
    #schema registry needs running kafka, depends_on is not enough, so let's restart when schema registry fails...
    restart: on-failure

  jobmanager:
    container_name: nussknacker_jobmanager
    image: flink:${FLINK_VERSION-1.14.0}-scala_${SCALA_VERSION-2.12}-${JAVA_VERSION-java11}
    ports:
      - "3031:8081"
    entrypoint: /flink-entrypoint.sh
    command: jobmanager
    environment:
      # those environment variables are duplicated here and in designer service, in case of setup with designer run in other network than flink
      KAFKA_ADDRESS: kafka:9092
      SCHEMA_REGISTRY_URL: http://schemaregistry:8081
      OPENAPI_SERVICE_URL: http://customerservice:5000
      TASK_MANAGER_NUMBER_OF_TASK_SLOTS: 40
    depends_on:
      - zookeeper
      - kafka
      - influxdb
    volumes:
      - ./flink/flink-conf.yaml:/tmp/flink-conf.yaml
      - ./flink/flink-entrypoint.sh:/flink-entrypoint.sh
      # can be removed unless you use database enricher
      - ./flink/postgresql-42.2.19.jar:/opt/flink/lib/postgresql-42.2.19.jar
      - ~/.m2/repository/org/apache/ignite/ignite-core/2.10.0/ignite-core-2.10.0.jar:/opt/flink/lib/ignite-core-2.10.0.jar
      - storage_flink:/opt/flink/data

  taskmanager:
    container_name: nussknacker_taskmanager
    image: flink:${FLINK_VERSION-1.14.0}-scala_${SCALA_VERSION-2.12}-${JAVA_VERSION-java11}
    ports:
      - "3063:9069"
      - "9009:9009"
      - "9008:9008"
    entrypoint: /flink-entrypoint.sh
    command: taskmanager
    environment:
      TASK_MANAGER_NUMBER_OF_TASK_SLOTS: 40
    depends_on:
      - zookeeper
      - kafka
      - jobmanager
      - influxdb
    volumes:
      - ./flink/flink-conf.yaml:/tmp/flink-conf.yaml
      - ./flink/flink-entrypoint.sh:/flink-entrypoint.sh
      - storage_flink:/opt/flink/data
      # can be removed unless you use database enricher
      - ./flink/postgresql-42.2.19.jar:/opt/flink/lib/postgresql-42.2.19.jar
      - ~/.m2/repository/org/apache/ignite/ignite-core/2.10.0/ignite-core-2.10.0.jar:/opt/flink/lib/ignite-core-2.10.0.jar
    ulimits:
      nproc: 70000
      nofile:
        soft: 70000
        hard: 70000

  grafana:
    container_name: nussknacker_grafana
    image: grafana/grafana:${GRAFANA_VERSION-8.0.6}
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:/grafana
      - GF_SECURITY_ALLOW_EMBEDDING=true
    depends_on:
      - influxdb

  ignite:
    container_name: nussknacker_ignite
    image: apacheignite/ignite:${IGNITE_VERSION-2.10.0}
    ports:
      - 10800:10800
      - 9020:9020
    volumes:
      - ./ignite:/user_config
      - storage_ignite:/persistent_storage
    environment:
      - OPTION_LIBS=ignite-rest-http,ignite-indexing
      - IGNITE_WORK_DIR=/persistent_storage
      - CONFIG_URI=file:///user_config/ignite-config.xml

  nifi:
    container_name: nussknacker_nifi
    image: apache/nifi:${NIFI_VERSION-1.12.1}
    entrypoint: [ "/opt/nifi/nifi-current/rafm_conf/start.sh" ]
    ports:
      - 3080:8080
    volumes:
      - ~/.m2/repository/org/postgresql/postgresql/42.2.18/postgresql-42.2.18.jar:/opt/nifi/nifi-current/storage/lib/postgresql-42.2.18.jar
      - ~/.m2/repository/org/apache/ignite/ignite-core/2.10.0/ignite-core-2.10.0.jar:/opt/nifi/nifi-current/storage/lib/ignite-core-2.10.0.jar
      - ~/.m2/repository/pl/touk/nifi-ignite-nar/0.2.3/nifi-ignite-nar-0.2.3.nar:/opt/nifi/nifi-current/extra-nars/nifi-ignite-nar-0.2.3.nar
      - ~/.m2/repository/pl/touk/nifi-ignite-services-api-nar/0.2.3/nifi-ignite-services-api-nar-0.2.3.nar:/opt/nifi/nifi-current/extra-nars/nifi-ignite-services-api-nar-0.2.3.nar
      - ~/.m2/repository/pl/touk/nifi-ignite-services-nar/0.2.3/nifi-ignite-services-nar-0.2.3.nar:/opt/nifi/nifi-current/extra-nars/nifi-ignite-services-nar-0.2.3.nar
      - ./nifi/conf:/opt/nifi/nifi-current/rafm_conf
    depends_on:
      - kafka
      - schemaregistry
      - ignite

  nginx:
    container_name: nussknacker_nginx
    image: nginx:${NGINX_VERSION-1.17.6}
    ports:
      - "${NGINX_PORT-8081}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    restart: on-failure
    depends_on:
      - zookeeper
      - influxdb
      - kafka
      - jobmanager
      - taskmanager
      - grafana

volumes:
  storage_zookeeper_datalog:
    name: nussknacker_storage_zookeeper_datalog
  storage_zookeeper_data:
    name: nussknacker_storage_zookeeper_data
  storage_kafka_data:
    name: nussknacker_storage_kafka_data
  storage_flink:
    name: nussknacker_storage_flink
  storage_influxdb:
    name: nussknacker_storage_influxdb
  storage_ignite:
    name: nussknacker_storage_ignite

networks:
  default:
    name: nussknacker_network
